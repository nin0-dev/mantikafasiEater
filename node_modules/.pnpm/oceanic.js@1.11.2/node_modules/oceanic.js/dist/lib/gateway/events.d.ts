import type { DispatchEventMap } from "./Dispatcher";
import type Shard from "./Shard";
export declare function APPLICATION_COMMAND_PERMISSIONS_UPDATE(data: DispatchEventMap["APPLICATION_COMMAND_PERMISSIONS_UPDATE"], shard: Shard): Promise<void>;
export declare function AUTO_MODERATION_ACTION_EXECUTION(data: DispatchEventMap["AUTO_MODERATION_ACTION_EXECUTION"], shard: Shard): Promise<void>;
export declare function AUTO_MODERATION_RULE_CREATE(data: DispatchEventMap["AUTO_MODERATION_RULE_CREATE"], shard: Shard): Promise<void>;
export declare function AUTO_MODERATION_RULE_DELETE(data: DispatchEventMap["AUTO_MODERATION_RULE_DELETE"], shard: Shard): Promise<void>;
export declare function AUTO_MODERATION_RULE_UPDATE(data: DispatchEventMap["AUTO_MODERATION_RULE_UPDATE"], shard: Shard): Promise<void>;
export declare function CHANNEL_CREATE(data: DispatchEventMap["CHANNEL_CREATE"], shard: Shard): Promise<void>;
export declare function CHANNEL_DELETE(data: DispatchEventMap["CHANNEL_DELETE"], shard: Shard): Promise<void>;
export declare function CHANNEL_PINS_UPDATE(data: DispatchEventMap["CHANNEL_PINS_UPDATE"], shard: Shard): Promise<void>;
export declare function CHANNEL_UPDATE(data: DispatchEventMap["CHANNEL_UPDATE"], shard: Shard): Promise<void>;
export declare function ENTITLEMENT_CREATE(data: DispatchEventMap["ENTITLEMENT_CREATE"], shard: Shard): Promise<void>;
export declare function ENTITLEMENT_DELETE(data: DispatchEventMap["ENTITLEMENT_DELETE"], shard: Shard): Promise<void>;
export declare function ENTITLEMENT_UPDATE(data: DispatchEventMap["ENTITLEMENT_UPDATE"], shard: Shard): Promise<void>;
export declare function GUILD_AUDIT_LOG_ENTRY_CREATE(data: DispatchEventMap["GUILD_AUDIT_LOG_ENTRY_CREATE"], shard: Shard): Promise<void>;
export declare function GUILD_BAN_ADD(data: DispatchEventMap["GUILD_BAN_ADD"], shard: Shard): Promise<void>;
export declare function GUILD_BAN_REMOVE(data: DispatchEventMap["GUILD_BAN_REMOVE"], shard: Shard): Promise<void>;
export declare function GUILD_CREATE(data: DispatchEventMap["GUILD_CREATE"], shard: Shard): Promise<void>;
export declare function GUILD_DELETE(data: DispatchEventMap["GUILD_DELETE"], shard: Shard): Promise<void>;
export declare function GUILD_EMOJIS_UPDATE(data: DispatchEventMap["GUILD_EMOJIS_UPDATE"], shard: Shard): Promise<void>;
export declare function GUILD_INTEGRATIONS_UPDATE(data: DispatchEventMap["GUILD_INTEGRATIONS_UPDATE"], shard: Shard): Promise<void>;
export declare function GUILD_MEMBER_ADD(data: DispatchEventMap["GUILD_MEMBER_ADD"], shard: Shard): Promise<void>;
export declare function GUILD_MEMBERS_CHUNK(data: DispatchEventMap["GUILD_MEMBERS_CHUNK"], shard: Shard): Promise<void>;
export declare function GUILD_MEMBER_REMOVE(data: DispatchEventMap["GUILD_MEMBER_REMOVE"], shard: Shard): Promise<void>;
export declare function GUILD_MEMBER_UPDATE(data: DispatchEventMap["GUILD_MEMBER_UPDATE"], shard: Shard): Promise<void>;
export declare function GUILD_ROLE_CREATE(data: DispatchEventMap["GUILD_ROLE_CREATE"], shard: Shard): Promise<void>;
export declare function GUILD_ROLE_DELETE(data: DispatchEventMap["GUILD_ROLE_DELETE"], shard: Shard): Promise<void>;
export declare function GUILD_ROLE_UPDATE(data: DispatchEventMap["GUILD_ROLE_UPDATE"], shard: Shard): Promise<void>;
export declare function GUILD_SCHEDULED_EVENT_CREATE(data: DispatchEventMap["GUILD_SCHEDULED_EVENT_CREATE"], shard: Shard): Promise<void>;
export declare function GUILD_SCHEDULED_EVENT_DELETE(data: DispatchEventMap["GUILD_SCHEDULED_EVENT_DELETE"], shard: Shard): Promise<void>;
export declare function GUILD_SCHEDULED_EVENT_UPDATE(data: DispatchEventMap["GUILD_SCHEDULED_EVENT_UPDATE"], shard: Shard): Promise<void>;
export declare function GUILD_SCHEDULED_EVENT_USER_ADD(data: DispatchEventMap["GUILD_SCHEDULED_EVENT_USER_ADD"], shard: Shard): Promise<void>;
export declare function GUILD_SCHEDULED_EVENT_USER_REMOVE(data: DispatchEventMap["GUILD_SCHEDULED_EVENT_USER_REMOVE"], shard: Shard): Promise<void>;
export declare function GUILD_STICKERS_UPDATE(data: DispatchEventMap["GUILD_STICKERS_UPDATE"], shard: Shard): Promise<void>;
export declare function GUILD_UPDATE(data: DispatchEventMap["GUILD_UPDATE"], shard: Shard): Promise<void>;
export declare function INTEGRATION_CREATE(data: DispatchEventMap["INTEGRATION_CREATE"], shard: Shard): Promise<void>;
export declare function INTEGRATION_DELETE(data: DispatchEventMap["INTEGRATION_DELETE"], shard: Shard): Promise<void>;
export declare function INTEGRATION_UPDATE(data: DispatchEventMap["INTEGRATION_UPDATE"], shard: Shard): Promise<void>;
export declare function INTERACTION_CREATE(data: DispatchEventMap["INTERACTION_CREATE"], shard: Shard): Promise<void>;
export declare function INVITE_CREATE(data: DispatchEventMap["INVITE_CREATE"], shard: Shard): Promise<void>;
export declare function INVITE_DELETE(data: DispatchEventMap["INVITE_DELETE"], shard: Shard): Promise<void>;
export declare function MESSAGE_CREATE(data: DispatchEventMap["MESSAGE_CREATE"], shard: Shard): Promise<void>;
export declare function MESSAGE_DELETE(data: DispatchEventMap["MESSAGE_DELETE"], shard: Shard): Promise<void>;
export declare function MESSAGE_DELETE_BULK(data: DispatchEventMap["MESSAGE_DELETE_BULK"], shard: Shard): Promise<void>;
export declare function MESSAGE_POLL_VOTE_ADD(data: DispatchEventMap["MESSAGE_POLL_VOTE_ADD"], shard: Shard): Promise<void>;
export declare function MESSAGE_POLL_VOTE_REMOVE(data: DispatchEventMap["MESSAGE_POLL_VOTE_REMOVE"], shard: Shard): Promise<void>;
export declare function MESSAGE_REACTION_ADD(data: DispatchEventMap["MESSAGE_REACTION_ADD"], shard: Shard): Promise<void>;
export declare function MESSAGE_REACTION_REMOVE(data: DispatchEventMap["MESSAGE_REACTION_REMOVE"], shard: Shard): Promise<void>;
export declare function MESSAGE_REACTION_REMOVE_ALL(data: DispatchEventMap["MESSAGE_REACTION_REMOVE_ALL"], shard: Shard): Promise<void>;
export declare function MESSAGE_REACTION_REMOVE_EMOJI(data: DispatchEventMap["MESSAGE_REACTION_REMOVE_EMOJI"], shard: Shard): Promise<void>;
export declare function MESSAGE_UPDATE(data: DispatchEventMap["MESSAGE_UPDATE"], shard: Shard): Promise<void>;
export declare function PRESENCE_UPDATE(data: DispatchEventMap["PRESENCE_UPDATE"], shard: Shard): Promise<void>;
export declare function READY(data: DispatchEventMap["READY"], shard: Shard): Promise<void>;
export declare function RESUMED(data: DispatchEventMap["RESUMED"], shard: Shard): Promise<void>;
export declare function STAGE_INSTANCE_CREATE(data: DispatchEventMap["STAGE_INSTANCE_CREATE"], shard: Shard): Promise<void>;
export declare function STAGE_INSTANCE_DELETE(data: DispatchEventMap["STAGE_INSTANCE_DELETE"], shard: Shard): Promise<void>;
export declare function STAGE_INSTANCE_UPDATE(data: DispatchEventMap["STAGE_INSTANCE_UPDATE"], shard: Shard): Promise<void>;
export declare function THREAD_CREATE(data: DispatchEventMap["THREAD_CREATE"], shard: Shard): Promise<void>;
export declare function THREAD_DELETE(data: DispatchEventMap["THREAD_DELETE"], shard: Shard): Promise<void>;
export declare function THREAD_LIST_SYNC(data: DispatchEventMap["THREAD_LIST_SYNC"], shard: Shard): Promise<void>;
export declare function THREAD_MEMBER_UPDATE(data: DispatchEventMap["THREAD_MEMBER_UPDATE"], shard: Shard): Promise<void>;
export declare function THREAD_MEMBERS_UPDATE(data: DispatchEventMap["THREAD_MEMBERS_UPDATE"], shard: Shard): Promise<void>;
export declare function THREAD_UPDATE(data: DispatchEventMap["THREAD_UPDATE"], shard: Shard): Promise<void>;
export declare function TYPING_START(data: DispatchEventMap["TYPING_START"], shard: Shard): Promise<void>;
export declare function USER_UPDATE(data: DispatchEventMap["USER_UPDATE"], shard: Shard): Promise<void>;
export declare function VOICE_CHANNEL_EFFECT_SEND(data: DispatchEventMap["VOICE_CHANNEL_EFFECT_SEND"], shard: Shard): Promise<void>;
export declare function VOICE_STATE_UPDATE(data: DispatchEventMap["VOICE_STATE_UPDATE"], shard: Shard): Promise<void>;
export declare function VOICE_CHANNEL_STATUS_UPDATE(data: DispatchEventMap["VOICE_CHANNEL_STATUS_UPDATE"], shard: Shard): Promise<void>;
export declare function VOICE_SERVER_UPDATE(data: DispatchEventMap["VOICE_SERVER_UPDATE"], shard: Shard): Promise<void>;
export declare function WEBHOOKS_UPDATE(data: DispatchEventMap["WEBHOOKS_UPDATE"], shard: Shard): Promise<void>;
